import sys
from collections import defaultdict
from tqdm import tqdm
import torch
import os
import joblib
sys.path.append("./")
from codes.modelMutat import ModelMutat
from codes.eval_model import EvalModel
from codes import draw
from codes.utils import create_dir
from codes import config
from scipy import stats
import numpy as np

dataset_name = config.dataset_name
model_name = config.model_name
attack_name = config.attack_name
mutation_name = config.mutation_name 
mutation_name_list =  config.mutation_name_list
if dataset_name == "CIFAR10":
    if model_name == "resnet18_nopretrain_32_32_3":
        if attack_name == "BadNets":
            from codes.datasets.cifar10.attacks.badnets_resnet18_nopretrain_32_32_3 import *
        if attack_name == "Blended":
            from codes.datasets.cifar10.attacks.Blended_resnet18_nopretrain_32_32_3 import *
        if attack_name == "IAD":
            from codes.datasets.cifar10.attacks.IAD_resnet18_nopretrain_32_32_3 import *
        if attack_name == "LabelConsistent":
            from codes.datasets.cifar10.attacks.LabelConsistent_resnet18_nopretrain_32_32_3 import *
        if attack_name == "Refool":
            from codes.datasets.cifar10.attacks.Refool_resnet18_nopretrain_32_32_3 import *
        if attack_name == "WaNet":
            from codes.datasets.cifar10.attacks.WaNet_resnet18_nopretrain_32_32_3 import *
    if model_name == "vgg19":
        if attack_name == "BadNets":
            from codes.datasets.cifar10.attacks.badnets_vgg19 import *


dict_state = get_dict_state()
backdoor_model = dict_state["backdoor_model"]    
testset = dict_state["poisoned_trainset"]
device = torch.device("cuda:0")
e = EvalModel(backdoor_model, testset, device)
origin_report = e._eval_classes_acc()
mutation_ratio_list = [0.01, 0.05, 0.1, 0.15, 0.20, 0.3, 0.4, 0.5, 0.6, 0.8]
mutation_model_num = 50
exp_root_dir = "/data/mml/backdoor_detect/experiments"
file_name = f"{dataset_name}_{model_name}_{attack_name}_{mutation_name}.data"
file_path = os.path.join(exp_root_dir,file_name)
data = joblib.load(file_path)
res = {}
for mutation_ratio in mutation_ratio_list:
    res[mutation_ratio] = defaultdict(list)
    for m_i in range(mutation_model_num):
        for class_i in range(10):
            cur_precision = data[mutation_ratio][m_i][str(class_i)]["precision"]
            origin_precision = origin_report[str(class_i)]["precision"]
            dif = origin_precision - cur_precision
            res[mutation_ratio][class_i].append(dif)

res_2 = defaultdict()
for mutation_ratio in mutation_ratio_list:
    min_mean_class_i = -1
    min_median_class_i = -1
    min_mean = float('inf')
    min_median = float("inf")
    for class_i in range(10):
        dif_list = res[mutation_ratio][class_i]
        mean = np.mean(dif_list)
        median = np.median(dif_list)     
        if mean < min_mean:
            min_mean = mean
            min_mean_class_i = class_i
        if median < min_median:
            min_median = median
            min_median_class_i = class_i
    res_2[mutation_ratio] = {"min_mean_class_i":min_mean_class_i, "min_median_class_i": min_median_class_i}

res_3 = {}
for mutation_ratio in mutation_ratio_list:
    min_mean_class_i = res_2[mutation_ratio]["min_mean_class_i"]
    min_median_class_i = res_2[mutation_ratio]["min_median_class_i"]
    if min_mean_class_i == min_median_class_i:
        res_3[mutation_ratio] = min_mean_class_i
    else:
        res_3[mutation_ratio] = -1

res_4 = {}
for mutation_ratio in mutation_ratio_list:
    target_class_i = res_3[mutation_ratio]
    if target_class_i == -1:
        continue
    target_dif_list = res[mutation_ratio][target_class_i]
    p_value_list = []
    for class_i in range(10):
        if class_i == target_class_i:
            continue
        dif_list = res[mutation_ratio][class_i]
        wil = stats.wilcoxon(target_dif_list, dif_list)
        p_value_list.append(wil.pvalue)
    res_4[mutation_ratio] = {
        "target_class_i":target_class_i,
        "p_value_list":p_value_list
    }

res_5  = {
        "candidate_ratio_1":[],
        "candidate_ratio_2":[],
        "candidate_ratio_3":None,
        }
min_sum = float('inf')
for mutation_ratio in res_4.keys():
    target_class_i = res_4[mutation_ratio]["target_class_i"]
    p_value_list = res_4[mutation_ratio]["p_value_list"]
    mean_p_value = np.mean(p_value_list)
    cur_sum = sum(p_value_list)

    all_P_flag = all(p_value < 0.05 for p_value in p_value_list)
    if all_P_flag is True:
        res_5["candidate_ratio_1"].append((mutation_ratio,cur_sum))
    if mean_p_value < 0.05:
        res_5["candidate_ratio_2"].append((mutation_ratio,cur_sum))
    if cur_sum < min_sum:
        min_sum = cur_sum
        res_5["candidate_ratio_3"] = mutation_ratio

temp_list = res_5["candidate_ratio_1"]
temp_list = sorted(temp_list, key=lambda x: x[1])
res_5["candidate_ratio_1"] = []
for x in temp_list:
    res_5["candidate_ratio_1"].append(x[0])
temp_list = res_5["candidate_ratio_2"]
temp_list = sorted(temp_list, key=lambda x: x[1])
res_5["candidate_ratio_2"] = []
for x in temp_list:
    res_5["candidate_ratio_2"].append(x[0])
print(res_5)
print("fa")